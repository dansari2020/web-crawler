exit
@urls.pop
@urls
n
crawl.run
exit
pages.pages[web_page]
pages.pages[url]
pages.pages.url
pages.pages
pages
exit
@url
n
@pages[@url].class
@pages[@url].url
content_page
n
exit
db.execute( "SELECT id, name, price, description FROM products ORDER BY #{order_by} #{order_type}")[0]
db.execute( "SELECT id, name, price, description FROM products ORDER BY #{order_by} #{order_type}"])[0]
db.execute( "SELECT id, name, price, description FROM products ORDER BY ?", ["#{order_by} #{order_type}"])[0]
db.execute( "SELECT id, name, price, description FROM products ORDER BY ?", "#{order_by} #{order_type}")
"select id, name, price, description from products Order by #{order_by} #{order_type}"
"select id, name, price, description from products Order by ?", "#{order_by} #{order_type}"
exit
Logger.methods
Logger.mthods
Logger.mthod
Logger
c
[item[:name], item[:price], item[:description], extra(item[:extra_information])]
c
item
c
@url
exit
page.doc
page.methods
page
n
a
n
exit
key
n
exit
value
key
n
exit
key
n
exit
page_content
row[0]
row[0], page_content
n
row
n
result
exit
result.storage
result
result.each{|key, value| p key}
result
exit
result
result.first
result
exit
result
exit
n
c
n
c
n
exit
opts[:ignore_urls]
opts
n
exit
c
n
c
YAML.load_file('config/config.yml').fetch(key, nil)
YAML.load_file('config/config.yml')
n
exit
Config
WebCrawler::Config
WebCrawler::Config[:LOG_PATH]
Config[:LOG_PATH]
exit
Logger.new
Logger.info("User")
exit
"#{URI(link).scheme}://#{URI(link).host}#{URI(link).path}"
"#{URI(link).schema}://#{URI(link).host}#{URI(link).path}"
URI(link).host
URI(link).fragment
URI(link).path
URI(link).scheme
URI(link).coerce(1)
URI(link).coerce
URI(link).coerce,
URI(link).request_uri
URI(link).methods - Object.methods
URI(link)
link
n
exit
n
@visited_url
n
@visited_url
n
@url
exit
c
@urls.size
n
found_links.size
@visited_url
@url
c
@url
exit
exitr
skip_url.start_with?(url) || url.start_with?(skip_url)
skip_url.start_with? url || url.start_with? skip_url
skip_url = @ignore_urls[0]
url
@ignore_urls[0]
@ignore_urls[0].start_with? url
@ignore_urls
url
ignore_urls
exit
@visited_url
c
@visited_url
c
@urls.size
@visited_url
c
@urls.size
@visited_url
c
@visited_url
c
exit
[1,2] - [1,3]
[1,2] - [1]
@urls.size
n
found_links.size
n
content_page.size
n
@url
n
@urls.size
n
found_links.size
n
@url
c
n
c
response.code
n
exit
response
response.class
response.methods - Object.methods
response.methods(false)
response.methods(0)
response.public_methods
response.methods
response.body
n
uri
n
c
n
c
@url
exit
page.links.select { |url| url.start_with? @webpage }
page.links.select { |url| url.starts_with? @webpage }
c
exit
c
u
n
u
c
x
n
!doc
n
nn
n
c
exit
(u =~ URI::regexp).nil?
('http://google.com' =~ URI::regexp).nil?
'http://google.com' !=~ URI::regexp
'http://google.com' =~ URI::regexp
u =~ URI::regexp
u !=~ URI::regexp
u =~ URI::regexp
require 'uri'
a
u
c
n
doc.search("//a[@href]")
n
doc
n
nn
n
doc
content_type
@headers['content-type'] = ["text/html"]
@headers['content-type']
content_type
doc
n
exit
!doc
n
@links.nil? || @links.empty?
n
page.links
n
exit
has_url?(url)
n
body
index
n
url = @url
@url
url
n
file_path(uid)
File.exist?(file_path(uid))
File.exist?(get_file_as_string(file_path(uid)))
get_file_as_string(file_path(uid))
file_path(uid)
n
uid
